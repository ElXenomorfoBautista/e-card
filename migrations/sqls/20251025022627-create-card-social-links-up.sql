-- ============================================
-- MIGRACIÓN: Card Social Links
-- ============================================
SET search_path TO e_card, public;

-- Tabla: card_social_links
CREATE TABLE e_card.card_social_links (
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    card_id integer NOT NULL,
    social_network_type_id integer NOT NULL,
    value varchar(200) NOT NULL,
    display_order integer DEFAULT 0,
    created_on timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
    modified_on timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_by integer,
    modified_by integer,
    deleted bool NOT NULL DEFAULT false,
    deleted_on timestamptz DEFAULT CURRENT_TIMESTAMP,
    deleted_by varchar(200),
    CONSTRAINT pk_card_social_links_id PRIMARY KEY (id),
    CONSTRAINT fk_card_social_links_card_id FOREIGN KEY (card_id)
        REFERENCES e_card.cards(id) ON DELETE CASCADE,
    CONSTRAINT fk_card_social_links_network_type_id FOREIGN KEY (social_network_type_id)
        REFERENCES e_card.social_network_types(id) ON DELETE NO ACTION
);

-- Índices
CREATE INDEX idx_card_social_links_card_id ON e_card.card_social_links (card_id);
CREATE INDEX idx_card_social_links_network_type ON e_card.card_social_links (social_network_type_id);

-- Triggers
CREATE TRIGGER mdt_card_social_links
BEFORE UPDATE ON e_card.card_social_links
FOR EACH ROW EXECUTE PROCEDURE public.moddatetime();

CREATE TRIGGER card_social_links_audit_trigger
AFTER INSERT OR UPDATE OR DELETE ON e_card.card_social_links
FOR EACH ROW EXECUTE PROCEDURE logs.audit_trigger('APPLICATION_LOGS');
